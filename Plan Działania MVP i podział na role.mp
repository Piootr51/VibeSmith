ğŸ‘¥ PodziaÅ‚ rÃ³l i zadaÅ„:
---------------------------------------------------------------------------------------------------------------------------------------
1. Frontend Developer (HTML/CSS/JS)
Skupia siÄ™ na wizualnej stronie aplikacji â€“ to, co widzi uÅ¼ytkownik.

Zadania:
 1. UtworzyÄ‡ formularz z polem do wpisania nastroju i przyciskiem Generate

 2. PrzygotowaÄ‡ miejsce na wyÅ›wietlenie playlisty

 3. OstylowaÄ‡ layout (CSS â€“ responsywnie i czytelnie)

 4. ObsÅ‚uÅ¼yÄ‡ klikniÄ™cie przycisku (addEventListener) i wysÅ‚aÄ‡ Å¼Ä…danie do backendu (fetch POST)

 5. WyÅ›wietliÄ‡ playlistÄ™ po otrzymaniu odpowiedzi

 6. ObsÅ‚uÅ¼yÄ‡ przypadki bÅ‚Ä™dÃ³w (np. brak odpowiedzi z serwera)
-------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Backend Developer (Node.js + Express)
Tworzy serwer, ktÃ³ry poÅ›redniczy miÄ™dzy frontendem a OpenAI API.

Zadania:
 1. ZainicjowaÄ‡ projekt Node.js (npm init)

 2. ZainstalowaÄ‡ potrzebne pakiety: express, cors, dotenv, openai

 3. SkonfigurowaÄ‡ podstawowy serwer Express

 4. UtworzyÄ‡ endpoint POST /api/playlist, ktÃ³ry:

- odbiera nastroje z frontend

- tworzy prompt (np. "StwÃ³rz listÄ™ 5 piosenek do nastroju: chill")

- wysyÅ‚a zapytanie do OpenAI (ChatGPT lub GPT-4-turbo)

- zwraca wynik jako JSON

 5. WczytywaÄ‡ klucz API z .env

 6. WÅ‚Ä…czyÄ‡ CORS Å¼eby frontend mÃ³gÅ‚ siÄ™ poÅ‚Ä…czyÄ‡
--------------------------------------------------------------------------------------------------------------------------------------------------------------
3. AI Prompt Engineer / API Integrator
Skupia siÄ™ na jakoÅ›ci odpowiedzi z OpenAI i optymalizacji promptÃ³w.

Zadania:
 1. StworzyÄ‡ jasny, zwiÄ™zÅ‚y prompt np.:

"Create a short playlist of 5 popular songs that match a [MOOD] mood. Include artist names."

 2. PrzetestowaÄ‡ kilka wersji promptu dla rÃ³Å¼nych nastrojÃ³w

 3. ZadbaÄ‡ o spÃ³jnoÅ›Ä‡ formatowania (np. numeracja, podziaÅ‚ na linijki)

 4. WspieraÄ‡ Backend Developera w testowaniu i debugowaniu

 5. ZapisaÄ‡ finalny prompt i uwagi do pliku prompt-notes.md w repozytorium
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
4. DevOps / GitHub Manager / Dokumentacja
Odpowiada za repozytorium, organizacjÄ™ pracy i dokumentacjÄ™ projektu.

Zadania:
 1. StworzyÄ‡ publiczne repozytorium na GitHubie

 DodaÄ‡ plik README.md z:

- tytuÅ‚em: VibeSmith

- krÃ³tkim opisem projektu

- celem projektu (np. "Generating playlists based on user mood using AI")

- listÄ… czÅ‚onkÃ³w zespoÅ‚u

 2. UstawiÄ‡ .gitignore dla node_modules, .env itp.

 3. PomÃ³c zespoÅ‚owi w robieniu pierwszego commita/pusha

 4. NadzorowaÄ‡ feature-branches i pull requesty

 5. TworzyÄ‡ i zarzÄ…dzaÄ‡ issues i milestones (np. MVP, Spotify API, UI polish)

 6. ZajÄ…Ä‡ siÄ™ wdroÅ¼eniem (jeÅ›li zdecydujecie siÄ™ wrzuciÄ‡ appkÄ™ np. na Vercel lub Render)
------------------------------------------------------------------------------------------------------------------------------------------------------------------

ğŸ”„ Proponowany flow pracy
1. GitHub Manager tworzy repo i README.md

2. Frontend Developer tworzy szkielet interfejsu

3. Backend Developer tworzy API i testuje je lokalnie (np. z Postmanem)

4. AI Prompt Engineer testuje i ulepsza prompt, podsyÅ‚a go backendowi

5. Frontend Å‚Ä…czy siÄ™ z API i wyÅ›wietla dane

6. WspÃ³lne testy i poprawki

7. KaÅ¼dy robi commit i merge przez GitHub
